// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  password            String
  role                UserRole?             @default(customer)
  address             String?
  profileImg          String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ServiceRequest      ServiceRequest[]
  appointmentSchedule appointmentSchedule[]
  reviews             Reviews[]
  blogs               Blogs[]
  service             Service[]

  @@map("users")
}

model ServiceRequest {
  id                       String                    @id @default(uuid())
  userId                   String
  user                     User                      @relation(fields: [userId], references: [id])
  deviceType               String
  issueDescription         String
  status                   ServiceStatus             @default(pending)
  reviewed                 Boolean                   @default(false)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  serviceRequestResolvings ServiceRequestResolving[]
  appointmentSchedule      appointmentSchedule[]

  @@map("service_request")
}

model ServiceRequestResolving {
  id                        String         @id @default(uuid())
  serviceRequestId          String
  serviceRequest            ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  technician_assigne_name   String?
  estimated_completion_time DateTime?
  ready_for_pickup          DateTime?
  status                    ServiceStatus  @default(pending)
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt

  @@map("service_request_resolving")
}

model appointmentSchedule {
  id               String   @id @default(uuid())
  appointment_date DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  serviceRequestId String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointment_schedule")
}

model Service {
  id               String   @id @default(uuid())
  appointment_date DateTime
  userId           String
  user             User     @relation(fields: [userId], references: [id])

  deviceType       String
  issueDescription String

  technician                String?
  estimated_completion_time DateTime?
  pickup_date               DateTime?
  status                    ServiceStatus @default(scheduled)
  isPaid                    Boolean?      @default(false)
  isReady                   Boolean       @default(false)
  isFixed                   Boolean       @default(false)
  deviceIssue               String?
  img                       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order[]

  @@map("services")
}

model Reviews {
  id          String @id @default(uuid())
  title       String
  description String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Blogs {
  id          String   @id @default(uuid())
  title       String
  description String
  img         String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blogs")
}

model Order {
  id              String   @id @default(uuid())
  hardware        Int?
  software        Int?
  parts           String?
  technician_bill Int?
  totalAmount     Int?
  tax             Int?
  oversarbation   String?
  invoiceNumber   String?
  serviceId       String
  isPaid          Boolean  @default(false)
  service         Service  @relation(fields: [serviceId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("orders")
}

enum UserRole {
  admin
  customer
  super_admin
}

enum ServiceStatus {
  pending
  in_progress
  awaiting_parts
  on_hold
  quality_check
  ready_for_pickup
  ready_for_appointment
  completed
  canceled
  fixed
  scheduled
  payment_pending
  delayed
  closed
  dispatched
  assignToTechnican
}
